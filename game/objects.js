function createCube(x, y, z, r, s, gl) {
    let cube = {
        positions: [
            // Front face
            -1.0 * s, -1.0 * s, 1.0 * s,
             1.0 * s, -1.0 * s, 1.0 * s,
             1.0 * s,  1.0 * s, 1.0 * s,
            -1.0 * s,  1.0 * s, 1.0 * s,

            // Back face
            -1.0 * s, -1.0 * s, -1.0 * s,
             1.0 * s, -1.0 * s, -1.0 * s,
             1.0 * s,  1.0 * s, -1.0 * s,
            -1.0 * s,  1.0 * s, -1.0 * s,

            // Right face
             1.0 * s, -1.0 * s,  1.0 * s,
             1.0 * s, -1.0 * s, -1.0 * s,
             1.0 * s,  1.0 * s, -1.0 * s,
             1.0 * s,  1.0 * s,  1.0 * s,

            // Left face
            -1.0 * s, -1.0 * s,  1.0 * s,
            -1.0 * s, -1.0 * s, -1.0 * s,
            -1.0 * s,  1.0 * s, -1.0 * s,
            -1.0 * s,  1.0 * s,  1.0 * s,

            // Top face
            -1.0 * s,  1.0 * s,  1.0 * s,
             1.0 * s,  1.0 * s,  1.0 * s,
             1.0 * s,  1.0 * s, -1.0 * s,
            -1.0 * s,  1.0 * s, -1.0 * s,

            // Bottom face
            -1.0 * s, -1.0 * s,  1.0 * s,
             1.0 * s, -1.0 * s,  1.0 * s,
             1.0 * s, -1.0 * s, -1.0 * s,
            -1.0 * s, -1.0 * s, -1.0 * s,
        ],
        indices: [
             0,  1,  2,      0,  2,  3, // front
             4,  5,  6,      4,  6,  7, // back
             8, 11, 10,      8,  9, 10, // right
            12, 15, 14,     12, 13, 14, // left
            17, 16, 18,     16, 18, 19, // top
            20, 21, 23,     21, 23, 22, // bottom
        ],
        translation: [x, y, z],
        rotation: r,
        texture: loadTexture(gl, TEXTURE_PLAIN),
        textureCoordinates: [
            // Front
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,
            
            // Back
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,
            
            // Right
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,
            
            // Left
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,
            
            // Top
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,
            
            // Bottom
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,
        ],
        vertexNormals: [
            // Front
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,

            // Back
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,

            // Right
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,

            // Left
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,

            // Top
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,

            // Bottom
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
        ],
        type: 'CUBE',
    };

    return cube;
}

function createGround(x, y, z, r, s, gl)
{
    var ground = {
        positions: [
            // Front face
            -15.0 * s, -0.2 * s, 100.0 * s,
             15.0 * s, -0.2 * s, 100.0 * s,
             15.0 * s,  0.2 * s, 100.0 * s,
            -15.0 * s,  0.2 * s, 100.0 * s,

            // Back face
            -15.0 * s, -0.2 * s, -100.0 * s,
             15.0 * s, -0.2 * s, -100.0 * s,
             15.0 * s,  0.2 * s, -100.0 * s,
            -15.0 * s,  0.2 * s, -100.0 * s,

            // Right face
            15.0 * s, -0.2 * s,  100.0 * s,
            15.0 * s, -0.2 * s, -100.0 * s,
            15.0 * s,  0.2 * s, -100.0 * s,
            15.0 * s,  0.2 * s,  100.0 * s,

            // Left face
            -15.0 * s, -0.2 * s,  100.0 * s,
            -15.0 * s, -0.2 * s, -100.0 * s,
            -15.0 * s,  0.2 * s, -100.0 * s,
            -15.0 * s,  0.2 * s,  100.0 * s,

            // Top face
            -15.0 * s, 0.2 * s,  100.0 * s,
             15.0 * s, 0.2 * s,  100.0 * s,
             15.0 * s, 0.2 * s, -100.0 * s,
            -15.0 * s, 0.2 * s, -100.0 * s,

            // Bottom face
            -15.0 * s, -0.2 * s,  100.0 * s,
             15.0 * s, -0.2 * s,  100.0 * s,
             15.0 * s, -0.2 * s, -100.0 * s,
            -15.0 * s, -0.2 * s, -100.0 * s,
        ],
        indices: [
             0,  1,  2,      0,  2,  3, // front
             4,  5,  6,      4,  6,  7, // back
             8, 11, 10,      8,  9, 10, // right
            12, 15, 14,     12, 13, 14, // left
            17, 16, 18,     16, 18, 19, // top
            20, 21, 23,     21, 23, 22, // bottom
        ],
        translation: [x, y, z],
        rotation: r,
        texture: loadTexture(gl, TEXTURE_GRAVEL),
        textureCoordinates: [
            // Front
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,

            // Back
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,

            // Right
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,

            // Left
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,

            // Top
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,

            // Bottom
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,
        ],
        vertexNormals: [
            // Front
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,

            // Back
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,

            // Right
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,

            // Left
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,

            // Top
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,

            // Bottom
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
        ],
        type: 'GROUND',
    };

    return ground;
}

function createTrack(x, y, z, r, s, gl)
{
    var track = {
        positions: [
            // Front face
            -1.6 * s, -0.2 * s, 8.0 * s,
             1.6 * s, -0.2 * s, 8.0 * s,
             1.6 * s,  0.2 * s, 8.0 * s,
            -1.6 * s,  0.2 * s, 8.0 * s,

            // Back face
            -1.6 * s, -0.2 * s, -8.0 * s,
             1.6 * s, -0.2 * s, -8.0 * s,
             1.6 * s,  0.2 * s, -8.0 * s,
            -1.6 * s,  0.2 * s, -8.0 * s,

            // Right face
             1.6 * s, -0.2 * s,  8.0 * s,
             1.6 * s, -0.2 * s, -8.0 * s,
             1.6 * s,  0.2 * s, -8.0 * s,
             1.6 * s,  0.2 * s,  8.0 * s,

            // Left face
            -1.6 * s, -0.2 * s,  8.0 * s,
            -1.6 * s, -0.2 * s, -8.0 * s,
            -1.6 * s,  0.2 * s, -8.0 * s,
            -1.6 * s,  0.2 * s,  8.0 * s,

            // Top face
            -1.6 * s,  0.2 * s,  8.0 * s,
             1.6 * s,  0.2 * s,  8.0 * s,
             1.6 * s,  0.2 * s, -8.0 * s,
            -1.6 * s,  0.2 * s, -8.0 * s,

            // Bottom face
            -1.6 * s, -0.2 * s,  8.0 * s,
             1.6 * s, -0.2 * s,  8.0 * s,
             1.6 * s, -0.2 * s, -8.0 * s,
            -1.6 * s, -0.2 * s, -8.0 * s,
        ],
        indices: [
             0,  1,  2,      0,  2,  3, // front
             4,  5,  6,      4,  6,  7, // back
             8, 11, 10,      8,  9, 10, // right
            12, 15, 14,     12, 13, 14, // left
            17, 16, 18,     16, 18, 19, // top
            20, 21, 23,     21, 23, 22, // bottom
        ],
        translation: [x, y, z],
        rotation: r,
        texture: loadTexture(gl, TEXTURE_TRACK),
        textureCoordinates: [
            // Front
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,

            // Back
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,

            // Right
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,

            // Left
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,

            // Top
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,

            // Bottom
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,
        ],
        vertexNormals: [
            // Front
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,

            // Back
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,

            // Right
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,

            // Left
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,

            // Top
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,

            // Bottom
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
        ],
        type: 'TRACK',
    };

    return track;
}

function createWall(x, y, z, r, s, gl) {
    var wall = {
        positions: [
            // Front face
            -5.5 * s, -6.0 * s,  10.0 * s,
             5.5 * s, -6.0 * s,  10.0 * s,
             5.5 * s,  6.0 * s,  10.0 * s,
            -5.5 * s,  6.0 * s,  10.0 * s,

            // Back face
            -5.5 * s, -6.0 * s, -10.0 * s,
             5.5 * s, -6.0 * s, -10.0 * s,
             5.5 * s,  6.0 * s, -10.0 * s,
            -5.5 * s,  6.0 * s, -10.0 * s,

            // Right face
             5.5 * s, -6.0 * s,  10.0 * s,
             5.5 * s, -6.0 * s, -10.0 * s,
             5.5 * s,  6.0 * s, -10.0 * s,
             5.5 * s,  6.0 * s,  10.0 * s,

            // Left face
            -5.5 * s, -6.0 * s,  10.0 * s,
            -5.5 * s, -6.0 * s, -10.0 * s,
            -5.5 * s,  6.0 * s, -10.0 * s,
            -5.5 * s,  6.0 * s,  10.0 * s,

            // Top face
            -5.5 * s,  6.0 * s,  10.0 * s,
             5.5 * s,  6.0 * s,  10.0 * s,
             5.5 * s,  6.0 * s, -10.0 * s,
            -5.5 * s,  6.0 * s, -10.0 * s,

            // Bottom face
            -5.5 * s, -6.0 * s,  10.0 * s,
             5.5 * s, -6.0 * s,  10.0 * s,
             5.5 * s, -6.0 * s, -10.0 * s,
            -5.5 * s, -6.0 * s, -10.0 * s,
        ],
        indices: [
             0,  1,  2,      0,  2,  3, // front
             4,  5,  6,      4,  6,  7, // back
             8, 11, 10,      8,  9, 10, // right
            12, 15, 14,     12, 13, 14, // left
            17, 16, 18,     16, 18, 19, // top
            20, 21, 23,     21, 23, 22, // bottom
        ],
        translation: [x, y, z],
        rotation: r,
        texture: loadTexture(gl, TEXTURE_WALL),
        textureCoordinates: [
            // Front
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,

            // Back
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,

            // Right
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,

            // Left
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,

            // Top
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,

            // Bottom
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,
        ],
        vertexNormals: [
            // Front
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,

            // Back
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,

            // Right
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,

            // Left
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,

            // Top
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,

            // Bottom
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
        ],
        type: 'WALL',
    };

    return wall;
}

function createPlayer(x, y, z, r, s, gl) {
    let player = {
        positions: [
            // Front face
            -0.4 * s, -0.7 * s, 0.2 * s,
             0.4 * s, -0.7 * s, 0.2 * s,
             0.4 * s,  0.7 * s, 0.2 * s,
            -0.4 * s,  0.7 * s, 0.2 * s,

            // Back face
            -0.4 * s, -0.7 * s, -0.2 * s,
             0.4 * s, -0.7 * s, -0.2 * s,
             0.4 * s,  0.7 * s, -0.2 * s,
            -0.4 * s,  0.7 * s, -0.2 * s,

            // Right face
             0.4 * s, -0.7 * s,  0.2 * s,
             0.4 * s, -0.7 * s, -0.2 * s,
             0.4 * s,  0.7 * s, -0.2 * s,
             0.4 * s,  0.7 * s,  0.2 * s,

            // Left face
            -0.4 * s, -0.7 * s,  0.2 * s,
            -0.4 * s, -0.7 * s, -0.2 * s,
            -0.4 * s,  0.7 * s, -0.2 * s,
            -0.4 * s,  0.7 * s,  0.2 * s,

            // Top face
            -0.4 * s,  0.7 * s,  0.2 * s,
             0.4 * s,  0.7 * s,  0.2 * s,
             0.4 * s,  0.7 * s, -0.2 * s,
            -0.4 * s,  0.7 * s, -0.2 * s,

            // Bottom face
            -0.4 * s, -0.7 * s,  0.2 * s,
             0.4 * s, -0.7 * s,  0.2 * s,
             0.4 * s, -0.7 * s, -0.2 * s,
            -0.4 * s, -0.7 * s, -0.2 * s,
        ],
        indices: [
             0,  1,  2,      0,  2,  3, // front
             4,  5,  6,      4,  6,  7, // back
             8, 11, 10,      8,  9, 10, // right
            12, 15, 14,     12, 13, 14, // left
            17, 16, 18,     16, 18, 19, // top
            20, 21, 23,     21, 23, 22, // bottom
        ],
        translation: [x, y, z],
        rotation: r,
        texture: loadTexture(gl, TEXTURE_PLAYER),
        textureCoordinates: [
            // Front
            1.0, 1.0,
            0.0, 1.0,
            0.0, 0.0,
            1.0, 0.0,

            // Back
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,

            // Right
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,

            // Left
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,

            // Top
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,

            // Bottom
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,
        ],
        vertexNormals: [
            // Front
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,

            // Back
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,

            // Right
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,

            // Left
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,

            // Top
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,

            // Bottom
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
        ],
        type: 'PLAYER',
    };

    return player;
}

function createPolice(x, y, z, r, s, gl) {
    let police = {
        positions: [
            // Front face
            -0.5 * s, -0.8 * s, 0.2 * s,
             0.5 * s, -0.8 * s, 0.2 * s,
             0.5 * s,  0.8 * s, 0.2 * s,
            -0.5 * s,  0.8 * s, 0.2 * s,

            // Back face
            -0.5 * s, -0.8 * s, -0.2 * s,
             0.5 * s, -0.8 * s, -0.2 * s,
             0.5 * s,  0.8 * s, -0.2 * s,
            -0.5 * s,  0.8 * s, -0.2 * s,

            // Right face
             0.5 * s, -0.8 * s,  0.2 * s,
             0.5 * s, -0.8 * s, -0.2 * s,
             0.5 * s,  0.8 * s, -0.2 * s,
             0.5 * s,  0.8 * s,  0.2 * s,

            // Left face
            -0.5 * s, -0.8 * s,  0.2 * s,
            -0.5 * s, -0.8 * s, -0.2 * s,
            -0.5 * s,  0.8 * s, -0.2 * s,
            -0.5 * s,  0.8 * s,  0.2 * s,

            // Top face
            -0.5 * s,  0.8 * s,  0.2 * s,
             0.5 * s,  0.8 * s,  0.2 * s,
             0.5 * s,  0.8 * s, -0.2 * s,
            -0.5 * s,  0.8 * s, -0.2 * s,

            // Bottom face
            -0.5 * s, -0.8 * s,  0.2 * s,
             0.5 * s, -0.8 * s,  0.2 * s,
             0.5 * s, -0.8 * s, -0.2 * s,
            -0.5 * s, -0.8 * s, -0.2 * s,
        ],
        indices: [
             0,  1,  2,      0,  2,  3, // front
             4,  5,  6,      4,  6,  7, // back
             8, 11, 10,      8,  9, 10, // right
            12, 15, 14,     12, 13, 14, // left
            17, 16, 18,     16, 18, 19, // top
            20, 21, 23,     21, 23, 22, // bottom
        ],
        translation: [x, y, z],
        rotation: r,
        texture: loadTexture(gl, TEXTURE_POLICE),
        textureCoordinates: [
            // Front
            0.0, 1.0,
            1.0, 1.0,
            1.0, 0.0,
            0.0, 0.0,

            // Back
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,

            // Right
            1.0, 1.0,
            1.0, 0.0,
            0.0, 0.0,
            0.0, 1.0,

            // Left
            1.0, 1.0,
            1.0, 0.0,
            0.0, 0.0,
            0.0, 1.0,

            // Top
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,

            // Bottom
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,
        ],
        vertexNormals: [
            // Front
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,

            // Back
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,

            // Right
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,

            // Left
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,

            // Top
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,

            // Bottom
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
        ],
        type: 'POLICE',
    };

    return police;
}

function createBar(x, y, z, r, s, gl) {
    let barricade = {
        positions: [
            // Front face
            -0.6 * s, -0.5 * s, 0.1 * s,
             0.6 * s, -0.5 * s, 0.1 * s,
             0.6 * s,  0.5 * s, 0.1 * s,
            -0.6 * s,  0.5 * s, 0.1 * s,

            // Back face
            -0.6 * s, -0.5 * s, -0.1 * s,
             0.6 * s, -0.5 * s, -0.1 * s,
             0.6 * s,  0.5 * s, -0.1 * s,
            -0.6 * s,  0.5 * s, -0.1 * s,

            // Right face
             0.6 * s, -0.5 * s,  0.1 * s,
             0.6 * s, -0.5 * s, -0.1 * s,
             0.6 * s,  0.5 * s, -0.1 * s,
             0.6 * s,  0.5 * s,  0.1 * s,

            // Left face
            -0.6 * s, -0.5 * s,  0.1 * s,
            -0.6 * s, -0.5 * s, -0.1 * s,
            -0.6 * s,  0.5 * s, -0.1 * s,
            -0.6 * s,  0.5 * s,  0.1 * s,

            // Top face
            -0.6 * s,  0.5 * s,  0.1 * s,
             0.6 * s,  0.5 * s,  0.1 * s,
             0.6 * s,  0.5 * s, -0.1 * s,
            -0.6 * s,  0.5 * s, -0.1 * s,

            // Bottom face
            -0.6 * s, -0.5 * s,  0.1 * s,
             0.6 * s, -0.5 * s,  0.1 * s,
             0.6 * s, -0.5 * s, -0.1 * s,
            -0.6 * s, -0.5 * s, -0.1 * s,
        ],
        indices: [
             0,  1,  2,      0,  2,  3, // front
             4,  5,  6,      4,  6,  7, // back
             8, 11, 10,      8,  9, 10, // right
            12, 15, 14,     12, 13, 14, // left
            17, 16, 18,     16, 18, 19, // top
            20, 21, 23,     21, 23, 22, // bottom
        ],
        translation: [x, y, z],
        rotation: r,
        texture: loadTexture(gl, TEXTURE_BARRICADE),
        textureCoordinates: [
            // Front
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,

            // Back
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,

            // Right
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,

            // Left
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,

            // Top
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,

            // Bottom
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,
        ],
        vertexNormals: [
            // Front
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,

            // Back
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,

            // Right
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,

            // Left
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,

            // Top
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,

            // Bottom
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
        ],
        type: 'BARRICADE',
    };

    return barricade;
}

function createTrain(x, y, z, r, s, gl) {
    let train = {
        positions: [
            // Front face
            -1.2 * s, -1.2 * s, 15.0 * s,
             1.2 * s, -1.2 * s, 15.0 * s,
             1.2 * s,  1.2 * s, 15.0 * s,
            -1.2 * s,  1.2 * s, 15.0 * s,

            // Back face
            -1.2 * s, -1.2 * s, -15.0 * s,
             1.2 * s, -1.2 * s, -15.0 * s,
             1.2 * s,  1.2 * s, -15.0 * s,
            -1.2 * s,  1.2 * s, -15.0 * s,

            // Right face
             1.2 * s, -1.2 * s,  15.0 * s,
             1.2 * s, -1.2 * s, -15.0 * s,
             1.2 * s,  1.2 * s, -15.0 * s,
             1.2 * s,  1.2 * s,  15.0 * s,

            // Left face
            -1.2 * s, -1.2 * s,  15.0 * s,
            -1.2 * s, -1.2 * s, -15.0 * s,
            -1.2 * s,  1.2 * s, -15.0 * s,
            -1.2 * s,  1.2 * s,  15.0 * s,

            // Top face
            -1.2 * s,  1.2 * s,  15.0 * s,
             1.2 * s,  1.2 * s,  15.0 * s,
             1.2 * s,  1.2 * s, -15.0 * s,
            -1.2 * s,  1.2 * s, -15.0 * s,

            // Bottom face
            -1.2 * s, -1.2 * s,  15.0 * s,
             1.2 * s, -1.2 * s,  15.0 * s,
             1.2 * s, -1.2 * s, -15.0 * s,
            -1.2 * s, -1.2 * s, -15.0 * s,
        ],
        indices: [
             0,  1,  2,      0,  2,  3, // front
             4,  5,  6,      4,  6,  7, // back
             8, 11, 10,      8,  9, 10, // right
            12, 15, 14,     12, 13, 14, // left
            17, 16, 18,     16, 18, 19, // top
            20, 21, 23,     21, 23, 22, // bottom
        ],
        translation: [x, y, z],
        rotation: r,
        texture: loadTexture(gl, TEXTURE_TRAIN),
        textureCoordinates: [
            // Front
            1.0, 1.0,
            0.0, 1.0,
            0.0, 0.0,
            1.0, 0.0,

            // Back
            1.0, 1.0,
            0.0, 1.0,
            0.0, 0.0,
            1.0, 0.0,

            // Right
            1.0, 1.0,
            0.0, 1.0,
            0.0, 0.0,
            1.0, 0.0,

            // Left
            1.0, 1.0,
            0.0, 1.0,
            0.0, 0.0,
            1.0, 0.0,

            // Top
            1.0, 1.0,
            1.0, 0.7,
            0.7, 0.7,
            0.7, 1.0,

            // Bottom
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,
        ],
        vertexNormals: [
            // Front
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,

            // Back
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,

            // Right
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,

            // Left
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,

            // Top
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,

            // Bottom
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
        ],
        type: 'TRAIN',
    };

    return train;
}

function createCoin(x, y, z, r, s, gl, jetpack, train) {
    let coin = {
        positions: [
            // Front face
            -1.2 * s, -1.2 * s, 0.4 * s,
             1.2 * s, -1.2 * s, 0.4 * s,
             1.2 * s,  1.2 * s, 0.4 * s,
            -1.2 * s,  1.2 * s, 0.4 * s,

            // Back face
            -1.2 * s, -1.2 * s, -0.4 * s,
             1.2 * s, -1.2 * s, -0.4 * s,
             1.2 * s,  1.2 * s, -0.4 * s,
            -1.2 * s,  1.2 * s, -0.4 * s,

            // Right face
             1.2 * s, -1.2 * s,  0.4 * s,
             1.2 * s, -1.2 * s, -0.4 * s,
             1.2 * s,  1.2 * s, -0.4 * s,
             1.2 * s,  1.2 * s,  0.4 * s,

            // Left face
            -1.2 * s, -1.2 * s,  0.4 * s,
            -1.2 * s, -1.2 * s, -0.4 * s,
            -1.2 * s,  1.2 * s, -0.4 * s,
            -1.2 * s,  1.2 * s,  0.4 * s,

            // Top face
            -1.2 * s,  1.2 * s,  0.4 * s,
             1.2 * s,  1.2 * s,  0.4 * s,
             1.2 * s,  1.2 * s, -0.4 * s,
            -1.2 * s,  1.2 * s, -0.4 * s,

            // Bottom face
            -1.2 * s, -1.2 * s,  0.4 * s,
             1.2 * s, -1.2 * s,  0.4 * s,
             1.2 * s, -1.2 * s, -0.4 * s,
            -1.2 * s, -1.2 * s, -0.4 * s,
        ],
        indices: [
             0,  1,  2,      0,  2,  3, // front
             4,  5,  6,      4,  6,  7, // back
             8, 11, 10,      8,  9, 10, // right
            12, 15, 14,     12, 13, 14, // left
            17, 16, 18,     16, 18, 19, // top
            20, 21, 23,     21, 23, 22, // bottom
        ],
        translation: [x, y, z],
        rotation: r,
        texture: loadTexture(gl, TEXTURE_COIN),
        textureCoordinates: [
            // Front
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,
            
            // Back
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,
            
            // Right
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,
            
            // Left
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,
            
            // Top
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,
            
            // Bottom
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,
        ],
        vertexNormals: [
            // Front
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,

            // Back
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,

            // Right
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,

            // Left
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,

            // Top
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,

            // Bottom
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
        ],
        type: 'COIN',
        jetpack: jetpack,
        train: train,
    };

    return coin;
}

function createBoot(x, y, z, r, s, gl) {
    let boot = {
        positions: [
            // Front face
            -1.0 * s, -1.0 * s, 1.0 * s,
             1.0 * s, -1.0 * s, 1.0 * s,
             1.0 * s,  1.0 * s, 1.0 * s,
            -1.0 * s,  1.0 * s, 1.0 * s,

            // Back face
            -1.0 * s, -1.0 * s, -1.0 * s,
             1.0 * s, -1.0 * s, -1.0 * s,
             1.0 * s,  1.0 * s, -1.0 * s,
            -1.0 * s,  1.0 * s, -1.0 * s,

            // Right face
             1.0 * s, -1.0 * s,  1.0 * s,
             1.0 * s, -1.0 * s, -1.0 * s,
             1.0 * s,  1.0 * s, -1.0 * s,
             1.0 * s,  1.0 * s,  1.0 * s,

            // Left face
            -1.0 * s, -1.0 * s,  1.0 * s,
            -1.0 * s, -1.0 * s, -1.0 * s,
            -1.0 * s,  1.0 * s, -1.0 * s,
            -1.0 * s,  1.0 * s,  1.0 * s,

            // Top face
            -1.0 * s,  1.0 * s,  1.0 * s,
             1.0 * s,  1.0 * s,  1.0 * s,
             1.0 * s,  1.0 * s, -1.0 * s,
            -1.0 * s,  1.0 * s, -1.0 * s,

            // Bottom face
            -1.0 * s, -1.0 * s,  1.0 * s,
             1.0 * s, -1.0 * s,  1.0 * s,
             1.0 * s, -1.0 * s, -1.0 * s,
            -1.0 * s, -1.0 * s, -1.0 * s,
        ],
        indices: [
             0,  1,  2,      0,  2,  3, // front
             4,  5,  6,      4,  6,  7, // back
             8, 11, 10,      8,  9, 10, // right
            12, 15, 14,     12, 13, 14, // left
            17, 16, 18,     16, 18, 19, // top
            20, 21, 23,     21, 23, 22, // bottom
        ],
        translation: [x, y, z],
        rotation: r,
        texture: loadTexture(gl, TEXTURE_BOOT),
        textureCoordinates: [
            // Front
            1.0, 1.0,
            0.0, 1.0,
            0.0, 0.0,
            1.0, 0.0,
            
            // Back
            1.0, 1.0,
            0.0, 1.0,
            0.0, 0.0,
            1.0, 0.0,
            
            // Right
            1.0, 1.0,
            0.0, 1.0,
            0.0, 0.0,
            1.0, 0.0,
            
            // Left
            1.0, 1.0,
            0.0, 1.0,
            0.0, 0.0,
            1.0, 0.0,
            
            // Top
            1.0, 1.0,
            0.0, 1.0,
            0.0, 0.0,
            1.0, 0.0,
            
            // Bottom
            1.0, 1.0,
            0.0, 1.0,
            0.0, 0.0,
            1.0, 0.0,
        ],
        vertexNormals: [
            // Front
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,

            // Back
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,

            // Right
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,

            // Left
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,

            // Top
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,

            // Bottom
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
        ],
        type: 'BOOT',
    };

    return boot;
}

function createJetpack(x, y, z, r, s, gl) {
    let jetpack = {
        positions: [
            // Front face
            -1.0 * s, -1.0 * s, 1.0 * s,
             1.0 * s, -1.0 * s, 1.0 * s,
             1.0 * s,  1.0 * s, 1.0 * s,
            -1.0 * s,  1.0 * s, 1.0 * s,

            // Back face
            -1.0 * s, -1.0 * s, -1.0 * s,
             1.0 * s, -1.0 * s, -1.0 * s,
             1.0 * s,  1.0 * s, -1.0 * s,
            -1.0 * s,  1.0 * s, -1.0 * s,

            // Right face
             1.0 * s, -1.0 * s,  1.0 * s,
             1.0 * s, -1.0 * s, -1.0 * s,
             1.0 * s,  1.0 * s, -1.0 * s,
             1.0 * s,  1.0 * s,  1.0 * s,

            // Left face
            -1.0 * s, -1.0 * s,  1.0 * s,
            -1.0 * s, -1.0 * s, -1.0 * s,
            -1.0 * s,  1.0 * s, -1.0 * s,
            -1.0 * s,  1.0 * s,  1.0 * s,

            // Top face
            -1.0 * s,  1.0 * s,  1.0 * s,
             1.0 * s,  1.0 * s,  1.0 * s,
             1.0 * s,  1.0 * s, -1.0 * s,
            -1.0 * s,  1.0 * s, -1.0 * s,

            // Bottom face
            -1.0 * s, -1.0 * s,  1.0 * s,
             1.0 * s, -1.0 * s,  1.0 * s,
             1.0 * s, -1.0 * s, -1.0 * s,
            -1.0 * s, -1.0 * s, -1.0 * s,
        ],
        indices: [
             0,  1,  2,      0,  2,  3, // front
             4,  5,  6,      4,  6,  7, // back
             8, 11, 10,      8,  9, 10, // right
            12, 15, 14,     12, 13, 14, // left
            17, 16, 18,     16, 18, 19, // top
            20, 21, 23,     21, 23, 22, // bottom
        ],
        translation: [x, y, z],
        rotation: r,
        texture: loadTexture(gl, TEXTURE_JETPACK),
        textureCoordinates: [
            // Front
            1.0, 1.0,
            0.0, 1.0,
            0.0, 0.0,
            1.0, 0.0,
            
            // Back
            1.0, 1.0,
            0.0, 1.0,
            0.0, 0.0,
            1.0, 0.0,
            
            // Right
            1.0, 1.0,
            0.0, 1.0,
            0.0, 0.0,
            1.0, 0.0,
            
            // Left
            1.0, 1.0,
            0.0, 1.0,
            0.0, 0.0,
            1.0, 0.0,
            
            // Top
            1.0, 1.0,
            0.0, 1.0,
            0.0, 0.0,
            1.0, 0.0,
            
            // Bottom
            1.0, 1.0,
            0.0, 1.0,
            0.0, 0.0,
            1.0, 0.0,
        ],
        vertexNormals: [
            // Front
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,

            // Back
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,

            // Right
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,

            // Left
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,

            // Top
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,

            // Bottom
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
        ],
        type: 'JETPACK',
    };

    return jetpack;
}

function createMagnet(x, y, z, r, s, gl) {
    let magnet = {
        positions: [
            // Front face
            -1.0 * s, -1.0 * s, 1.0 * s,
             1.0 * s, -1.0 * s, 1.0 * s,
             1.0 * s,  1.0 * s, 1.0 * s,
            -1.0 * s,  1.0 * s, 1.0 * s,

            // Back face
            -1.0 * s, -1.0 * s, -1.0 * s,
             1.0 * s, -1.0 * s, -1.0 * s,
             1.0 * s,  1.0 * s, -1.0 * s,
            -1.0 * s,  1.0 * s, -1.0 * s,

            // Right face
             1.0 * s, -1.0 * s,  1.0 * s,
             1.0 * s, -1.0 * s, -1.0 * s,
             1.0 * s,  1.0 * s, -1.0 * s,
             1.0 * s,  1.0 * s,  1.0 * s,

            // Left face
            -1.0 * s, -1.0 * s,  1.0 * s,
            -1.0 * s, -1.0 * s, -1.0 * s,
            -1.0 * s,  1.0 * s, -1.0 * s,
            -1.0 * s,  1.0 * s,  1.0 * s,

            // Top face
            -1.0 * s,  1.0 * s,  1.0 * s,
             1.0 * s,  1.0 * s,  1.0 * s,
             1.0 * s,  1.0 * s, -1.0 * s,
            -1.0 * s,  1.0 * s, -1.0 * s,

            // Bottom face
            -1.0 * s, -1.0 * s,  1.0 * s,
             1.0 * s, -1.0 * s,  1.0 * s,
             1.0 * s, -1.0 * s, -1.0 * s,
            -1.0 * s, -1.0 * s, -1.0 * s,
        ],
        indices: [
             0,  1,  2,      0,  2,  3, // front
             4,  5,  6,      4,  6,  7, // back
             8, 11, 10,      8,  9, 10, // right
            12, 15, 14,     12, 13, 14, // left
            17, 16, 18,     16, 18, 19, // top
            20, 21, 23,     21, 23, 22, // bottom
        ],
        translation: [x, y, z],
        rotation: r,
        texture: loadTexture(gl, TEXTURE_MAGNET),
        textureCoordinates: [
            // Front
            1.0, 1.0,
            0.0, 1.0,
            0.0, 0.0,
            1.0, 0.0,
            
            // Back
            1.0, 1.0,
            0.0, 1.0,
            0.0, 0.0,
            1.0, 0.0,
            
            // Right
            1.0, 1.0,
            0.0, 1.0,
            0.0, 0.0,
            1.0, 0.0,
            
            // Left
            1.0, 1.0,
            0.0, 1.0,
            0.0, 0.0,
            1.0, 0.0,
            
            // Top
            1.0, 1.0,
            0.0, 1.0,
            0.0, 0.0,
            1.0, 0.0,
            
            // Bottom
            1.0, 1.0,
            0.0, 1.0,
            0.0, 0.0,
            1.0, 0.0,
        ],
        vertexNormals: [
            // Front
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,

            // Back
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,

            // Right
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,

            // Left
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,

            // Top
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,

            // Bottom
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
        ],
        type: 'MAGNET',
    };

    return magnet;
}

function createOil(x, y, z, r, s, gl) {
    let oil = {
        positions: [
            // Front face
            -0.4 * s, -0.4 * s, 0.4* s,
             0.4 * s, -0.4 * s, 0.4* s,
             0.4 * s,  0.4 * s, 0.4* s,
            -0.4 * s,  0.4 * s, 0.4* s,

            // Back face
            -0.4 * s, -0.4 * s, -0.4 * s,
             0.4 * s, -0.4 * s, -0.4 * s,
             0.4 * s,  0.4 * s, -0.4 * s,
            -0.4 * s,  0.4 * s, -0.4 * s,

            // Right face
             0.4 * s, -0.4 * s,  0.4 * s,
             0.4 * s, -0.4 * s, -0.4 * s,
             0.4 * s,  0.4 * s, -0.4 * s,
             0.4 * s,  0.4 * s,  0.4 * s,

            // Left face
            -0.4 * s, -0.4 * s,  0.4 * s,
            -0.4 * s, -0.4 * s, -0.4 * s,
            -0.4 * s,  0.4 * s, -0.4 * s,
            -0.4 * s,  0.4 * s,  0.4 * s,

            // Top face
            -0.4 * s,  0.4 * s,  0.4 * s,
             0.4 * s,  0.4 * s,  0.4 * s,
             0.4 * s,  0.4 * s, -0.4 * s,
            -0.4 * s,  0.4 * s, -0.4 * s,

            // Bottom face
            -0.4 * s, -0.4 * s,  0.4 * s,
             0.4 * s, -0.4 * s,  0.4 * s,
             0.4 * s, -0.4 * s, -0.4 * s,
            -0.4 * s, -0.4 * s, -0.4 * s,
        ],
        indices: [
             0,  1,  2,      0,  2,  3, // front
             4,  5,  6,      4,  6,  7, // back
             8, 11, 10,      8,  9, 10, // right
            12, 15, 14,     12, 13, 14, // left
            17, 16, 18,     16, 18, 19, // top
            20, 21, 23,     21, 23, 22, // bottom
        ],
        translation: [x, y, z],
        rotation: r,
        texture: loadTexture(gl, TEXTURE_OIL),
        textureCoordinates: [
            // Front
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,

            // Back
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,

            // Right
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,

            // Left
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,

            // Top
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,

            // Bottom
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,
        ],
        vertexNormals: [
            // Front
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,

            // Back
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,

            // Right
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,

            // Left
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,

            // Top
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,

            // Bottom
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
        ],
        type: 'OIL',
    };

    return oil;
}

function createBanana(x, y, z, r, s, gl) {
    let banana = {
        positions: [
            // Front face
            -0.4 * s, -0.4 * s, 0.4 * s,
             0.4 * s, -0.4 * s, 0.4 * s,
             0.4 * s,  0.4 * s, 0.4 * s,
            -0.4 * s,  0.4 * s, 0.4 * s,

            // Back face
            -0.4 * s, -0.4 * s, -0.4 * s,
             0.4 * s, -0.4 * s, -0.4 * s,
             0.4 * s,  0.4 * s, -0.4 * s,
            -0.4 * s,  0.4 * s, -0.4 * s,

            // Right face
             0.4 * s, -0.4 * s,  0.4 * s,
             0.4 * s, -0.4 * s, -0.4 * s,
             0.4 * s,  0.4 * s, -0.4 * s,
             0.4 * s,  0.4 * s,  0.4 * s,

            // Left face
            -0.4 * s, -0.4 * s,  0.4 * s,
            -0.4 * s, -0.4 * s, -0.4 * s,
            -0.4 * s,  0.4 * s, -0.4 * s,
            -0.4 * s,  0.4 * s,  0.4 * s,

            // Top face
            -0.4 * s,  0.4 * s,  0.4 * s,
             0.4 * s,  0.4 * s,  0.4 * s,
             0.4 * s,  0.4 * s, -0.4 * s,
            -0.4 * s,  0.4 * s, -0.4 * s,

            // Bottom face
            -0.4 * s, -0.4 * s,  0.4 * s,
             0.4 * s, -0.4 * s,  0.4 * s,
             0.4 * s, -0.4 * s, -0.4 * s,
            -0.4 * s, -0.4 * s, -0.4 * s,
        ],
        indices: [
             0,  1,  2,      0,  2,  3, // front
             4,  5,  6,      4,  6,  7, // back
             8, 11, 10,      8,  9, 10, // right
            12, 15, 14,     12, 13, 14, // left
            17, 16, 18,     16, 18, 19, // top
            20, 21, 23,     21, 23, 22, // bottom
        ],
        translation: [x, y, z],
        rotation: r,
        texture: loadTexture(gl, TEXTURE_BANANA),
        textureCoordinates: [
            // Front
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,

            // Back
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,

            // Right
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,

            // Left
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,

            // Top
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,

            // Bottom
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,
        ],
        vertexNormals: [
            // Front
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,

            // Back
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,

            // Right
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,

            // Left
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,

            // Top
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,

            // Bottom
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
        ],
        type: 'BANANA',
    };

    return banana;
}

function createCity(x, y, z, r, s, gl) {
    let city = {
        positions: [
            // Front face
            -100 * s, -80.0 * s, 1.0 * s,
             100 * s, -80.0 * s, 1.0 * s,
             100 * s,  80.0 * s, 1.0 * s,
            -100 * s,  80.0 * s, 1.0 * s,

            // Back face
            -100 * s, -80.0 * s, -1.0 * s,
             100 * s, -80.0 * s, -1.0 * s,
             100 * s,  80.0 * s, -1.0 * s,
            -100 * s,  80.0 * s, -1.0 * s,

            // Right face
             100 * s, -80.0 * s,  1.0 * s,
             100 * s, -80.0 * s, -1.0 * s,
             100 * s,  80.0 * s, -1.0 * s,
             100 * s,  80.0 * s,  1.0 * s,

            // Left face
            -100 * s, -80.0 * s,  1.0 * s,
            -100 * s, -80.0 * s, -1.0 * s,
            -100 * s,  80.0 * s, -1.0 * s,
            -100 * s,  80.0 * s,  1.0 * s,

            // Top face
            -100 * s,  80.0 * s,  1.0 * s,
             100 * s,  80.0 * s,  1.0 * s,
             100 * s,  80.0 * s, -1.0 * s,
            -100 * s,  80.0 * s, -1.0 * s,

            // Bottom face
            -100 * s, -80.0 * s,  1.0 * s,
             100 * s, -80.0 * s,  1.0 * s,
             100 * s, -80.0 * s, -1.0 * s,
            -100 * s, -80.0 * s, -1.0 * s,
        ],
        indices: [
             0,  1,  2,      0,  2,  3, // front
             4,  5,  6,      4,  6,  7, // back
             8, 11, 10,      8,  9, 10, // right
            12, 15, 14,     12, 13, 14, // left
            17, 16, 18,     16, 18, 19, // top
            20, 21, 23,     21, 23, 22, // bottom
        ],
        translation: [x, y, z],
        rotation: r,
        texture: loadTexture(gl, TEXTURE_CITY),
        textureCoordinates: [
            // Front
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,
            
            // Back
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,
            
            // Right
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,
            
            // Left
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,
            
            // Top
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,
            
            // Bottom
            0.0, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 1.0,
        ],
        vertexNormals: [
            // Front
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,
            0.0,  0.0,  1.0,

            // Back
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,
            0.0,  0.0, -1.0,

            // Right
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,
            1.0,  0.0,  0.0,

            // Left
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,

            // Top
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,
            0.0,  1.0,  0.0,

            // Bottom
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
            0.0, -1.0,  0.0,
        ],
        type: 'CITY',
    };

    return city;
}

// Initiation methods
function createDynamic(gl) {    
    // Barricade & Coins
    var last = -20.0;
    dynamicObjects.push(createBar (-3.0 * getRandomInt(-1, 1), -2.5, last, [0.0, 0.0, 0.0], 1.0, gl));
    coinsForBarricade(gl, dynamicObjects.length - 1);      
    for(let i=0; i<6; ++i)
    {
        last = last - getRandomInt(20, 50);
        dynamicObjects.push(createBar (-3.0 * getRandomInt(-1, 1), -2.5, last, [0.0, 0.0, 0.0], 1.0, gl));
        coinsForBarricade(gl, dynamicObjects.length - 1);      
    }
    
    // Oil and Banana
    dynamicObjects.push(createOil   (-3.0 * getRandomInt(-1, 1), -2.2, -1.0 * getRandomInt(100, 200), [0.0, 0.0, 0.0], 1.0, gl));
    dynamicObjects.push(createBanana(-3.0 * getRandomInt(-1, 1), -2.2, -1.0 * getRandomInt(250, 350), [0.0, 0.0, 0.0], 1.0, gl));
    last_slip = dynamicObjects[dynamicObjects.length - 1].translation[2];
    
    // Train
    last = -110.0;
    dynamicObjects.push(createTrain (-3.0 * getRandomInt(-1, 1),-1.8, last,    [0.0, 0.0, 0.0],   1.0, gl));
    coinsForTrain(gl, dynamicObjects.length - 1);
    for(let i=0; i<3; ++i)
    {
        last = last - getRandomInt(50, 80);
        dynamicObjects.push(createTrain (-3.0 * getRandomInt(-1, 1),-1.8, last,    [0.0, 0.0, 0.0],   1.0, gl));
        coinsForTrain(gl, dynamicObjects.length - 1);
    }

    // Track
    dynamicObjects.push(createTrack ( L_TRACK,  -3.0,    -5.0,    [0.0, 0.0, 0.0],   1.0, gl));    // Set 1
    dynamicObjects.push(createTrack ( M_TRACK,  -3.0,    -5.0,    [0.0, 0.0, 0.0],   1.0, gl));    // Set 1
    dynamicObjects.push(createTrack ( R_TRACK,  -3.0,    -5.0,    [0.0, 0.0, 0.0],   1.0, gl));    // Set 1
    dynamicObjects.push(createTrack ( L_TRACK,  -3.0,   -21.0,    [0.0, 0.0, 0.0],   1.0, gl));    // Set 2
    dynamicObjects.push(createTrack ( M_TRACK,  -3.0,   -21.0,    [0.0, 0.0, 0.0],   1.0, gl));    // Set 2
    dynamicObjects.push(createTrack ( R_TRACK,  -3.0,   -21.0,    [0.0, 0.0, 0.0],   1.0, gl));    // Set 2
    dynamicObjects.push(createTrack ( L_TRACK,  -3.0,   -37.0,    [0.0, 0.0, 0.0],   1.0, gl));    // Set 3
    dynamicObjects.push(createTrack ( M_TRACK,  -3.0,   -37.0,    [0.0, 0.0, 0.0],   1.0, gl));    // Set 3
    dynamicObjects.push(createTrack ( R_TRACK,  -3.0,   -37.0,    [0.0, 0.0, 0.0],   1.0, gl));    // Set 3
    dynamicObjects.push(createTrack ( L_TRACK,  -3.0,   -53.0,    [0.0, 0.0, 0.0],   1.0, gl));    // Set 4
    dynamicObjects.push(createTrack ( M_TRACK,  -3.0,   -53.0,    [0.0, 0.0, 0.0],   1.0, gl));    // Set 4
    dynamicObjects.push(createTrack ( R_TRACK,  -3.0,   -53.0,    [0.0, 0.0, 0.0],   1.0, gl));    // Set 4
    dynamicObjects.push(createTrack ( L_TRACK,  -3.0,   -69.0,    [0.0, 0.0, 0.0],   1.0, gl));    // Set 5
    dynamicObjects.push(createTrack ( M_TRACK,  -3.0,   -69.0,    [0.0, 0.0, 0.0],   1.0, gl));    // Set 5
    dynamicObjects.push(createTrack ( R_TRACK,  -3.0,   -69.0,    [0.0, 0.0, 0.0],   1.0, gl));    // Set 5
    dynamicObjects.push(createTrack ( L_TRACK,  -3.0,   -85.0,    [0.0, 0.0, 0.0],   1.0, gl));    // Set 6
    dynamicObjects.push(createTrack ( M_TRACK,  -3.0,   -85.0,    [0.0, 0.0, 0.0],   1.0, gl));    // Set 6
    dynamicObjects.push(createTrack ( R_TRACK,  -3.0,   -85.0,    [0.0, 0.0, 0.0],   1.0, gl));    // Set 6
    dynamicObjects.push(createTrack ( L_TRACK,  -3.0,  -101.0,    [0.0, 0.0, 0.0],   1.0, gl));    // Set 7
    dynamicObjects.push(createTrack ( M_TRACK,  -3.0,  -101.0,    [0.0, 0.0, 0.0],   1.0, gl));    // Set 7
    dynamicObjects.push(createTrack ( R_TRACK,  -3.0,  -101.0,    [0.0, 0.0, 0.0],   1.0, gl));    // Set 7
    dynamicObjects.push(createTrack ( L_TRACK,  -3.0,  -117.0,    [0.0, 0.0, 0.0],   1.0, gl));    // Set 8
    dynamicObjects.push(createTrack ( M_TRACK,  -3.0,  -117.0,    [0.0, 0.0, 0.0],   1.0, gl));    // Set 8
    dynamicObjects.push(createTrack ( R_TRACK,  -3.0,  -117.0,    [0.0, 0.0, 0.0],   1.0, gl));    // Set 8
    dynamicObjects.push(createTrack ( L_TRACK,  -3.0,  -133.0,    [0.0, 0.0, 0.0],   1.0, gl));    // Set 9
    dynamicObjects.push(createTrack ( M_TRACK,  -3.0,  -133.0,    [0.0, 0.0, 0.0],   1.0, gl));    // Set 9
    dynamicObjects.push(createTrack ( R_TRACK,  -3.0,  -133.0,    [0.0, 0.0, 0.0],   1.0, gl));    // Set 9

    // Wall
    dynamicObjects.push(createWall  (-11.5,  -3.0,   -5.0,    [0.0, 0.0, 0.0],   1.0, gl));    // Set 1
    dynamicObjects.push(createWall  ( 11.5,  -3.0,   -5.0,    [0.0, 0.0, 0.0],   1.0, gl));    // Set 1
    dynamicObjects.push(createWall  (-11.5,  -3.0,  -30.0,    [0.0, 0.0, 0.0],   1.0, gl));    // Set 2
    dynamicObjects.push(createWall  ( 11.5,  -3.0,  -30.0,    [0.0, 0.0, 0.0],   1.0, gl));    // Set 2
    dynamicObjects.push(createWall  (-11.5,  -3.0,  -55.0,    [0.0, 0.0, 0.0],   1.0, gl));    // Set 3
    dynamicObjects.push(createWall  ( 11.5,  -3.0,  -55.0,    [0.0, 0.0, 0.0],   1.0, gl));    // Set 3
    dynamicObjects.push(createWall  (-11.5,  -3.0,  -80.0,    [0.0, 0.0, 0.0],   1.0, gl));    // Set 4
    dynamicObjects.push(createWall  ( 11.5,  -3.0,  -80.0,    [0.0, 0.0, 0.0],   1.0, gl));    // Set 4
    dynamicObjects.push(createWall  (-11.5,  -3.0, -105.0,    [0.0, 0.0, 0.0],   1.0, gl));    // Set 5
    dynamicObjects.push(createWall  ( 11.5,  -3.0, -105.0,    [0.0, 0.0, 0.0],   1.0, gl));    // Set 5
    
    // Jumping boots, Magnets and Jetpacks
    dynamicObjects.push(createMagnet (-3.0 * getRandomInt(-1, 1),  -2.0, (getRandomInt(25, 80)) * -1.0, [0.0, 0.0, 0.0], 0.3, gl));
    dynamicObjects.push(createBoot   (-3.0 * getRandomInt(-1, 1),  -2.0, (getRandomInt(185, 285)) * -1.0, [0.0, 0.0, 0.0], 0.3, gl));
    dynamicObjects.push(createJetpack(-3.0 * getRandomInt(-1, 1),  -2.0, (getRandomInt(550, 640)) * -1.0, [0.0, 0.0, 0.0], 0.3, gl));
    last_powerup = dynamicObjects[dynamicObjects.length - 1].translation[2];

    // Ground
    dynamicObjects.push(createGround(0.0, -4.0,  -5.0, [0.0, 0.0, 0.0], 1.0, gl)); 
    dynamicObjects.push(createGround(0.0, -4.0,-105.0, [0.0, 0.0, 0.0], 1.0, gl));
}

function createStatic(gl) {
    staticObjects.push(createPlayer(0.0, -2.2, -10.0, [0.0, 0.0, 0.0], 1.0, gl)); // Player
    staticObjects.push(createPolice(0.0, -2.0,  -6.0, [0.0, 0.0, 0.0], 1.0, gl)); // Police
    staticObjects.push(createCity(0.0, 0.0,  -98.0, [0.0, 0.0, 0.0], 1.0, gl)); // Player
}

// Support methods 
function coinsForBarricade(gl, n) {
    var flag = true;
    if(n == (dynamicObjects.length - 1))
    {
        flag = false;
    }
    for(var i=0; i<9; ++i)
    {
        if(i < 4)
        {
            dynamicObjects.push(createCoin(dynamicObjects[n].translation[0], -2.0, dynamicObjects[n].translation[2] + ((4-i) * 3), [0.0, 0.0, 45.0 * Math.PI / 180.0], 0.15, gl, false, false));
        }
        else if(i == 4)
        {
            dynamicObjects.push(createCoin(dynamicObjects[n].translation[0], -1.0, dynamicObjects[n].translation[2], [0.0, 0.0, 45.0 * Math.PI / 180.0], 0.15, gl, false, false));
        }
        else
        {                                                                                   
            dynamicObjects.push(createCoin(dynamicObjects[n].translation[0], -2.0, dynamicObjects[n].translation[2] - ((i-4) * 3), [0.0, 0.0, 45.0 * Math.PI / 180.0], 0.15, gl, false, false));
        }
        if(flag)
        {
            dynamicBuffers.push(initBuffers(gl, dynamicObjects[dynamicObjects.length - 1]));
        }
    }
}

function coinsForTrain(gl, n) {
    var flag = true;
    if(n == (dynamicObjects.length - 1))
    {
        flag = false;
    }
    for(var i=0; i<9; ++i)
    {
        if(i < 4)
        {
            dynamicObjects.push(createCoin(dynamicObjects[n].translation[0], 0.4, dynamicObjects[n].translation[2] + ((4-i) * 3), [0.0, 0.0, 45.0 * Math.PI / 180.0], 0.15, gl, false, true));
        }
        else if(i == 4)
        {
            dynamicObjects.push(createCoin(dynamicObjects[n].translation[0], 0.4, dynamicObjects[n].translation[2], [0.0, 0.0, 45.0 * Math.PI / 180.0], 0.15, gl, false, true));
        }
        else
        {                                                                                   
            dynamicObjects.push(createCoin(dynamicObjects[n].translation[0], 0.4, dynamicObjects[n].translation[2] - ((i-4) * 3), [0.0, 0.0, 45.0 * Math.PI / 180.0], 0.15, gl, false, true));
        }
        if(flag)
        {
            dynamicBuffers.push(initBuffers(gl, dynamicObjects[dynamicObjects.length - 1]));
        }
    }
}

function detectCollisionCollectible(i, gl) {
    let collectible = dynamicObjects[i].translation;
    let surfer      = staticObjects[0].translation;
    let distance = Math.sqrt(Math.pow(collectible[0] - surfer[0], 2) + Math.pow(collectible[1] - surfer[1], 2) + Math.pow(collectible[2] - surfer[2], 2));
    if(distance < 1.0)
    {
        if(dynamicObjects[i].type === 'BOOT')
        {
            displayMessage('SWEET! JUMPING BOOTS FOR YOU');
            jump = 2.0;
            setTimeout(() => {
                if(!keep_jump)
                {
                    jump = 1.0;
                }
                else
                {
                    keep_jump = false;
                }
            }, 12000);
        }
        else if (dynamicObjects[i].type === 'COIN')
        {
            coins += 1;
            dynamicObjects[i].translation[0] = -3.0 * getRandomInt(-1, 1);
            dynamicObjects[i].translation[2] = getRandomInt(actual_distance, 5400);
        }
        else if (dynamicObjects[i].type === 'JETPACK')
        {
            displayMessage('TAKING OFF! ADIOS!');
            jetpack_flag = true;
            jump = 0.0;
            var prev_position = staticObjects[0].translation[2] - 30.0;
            for(let i=0; i<102; ++i)
            {
                dynamicObjects.push(createCoin(getRandomInt(-1, 1) * 3.0, -2.0, prev_position - 3.0, [0.0, 0.0, 45.0 * Math.PI / 180.0], 0.15, gl, true, false));
                dynamicBuffers.push(initBuffers(gl, dynamicObjects[dynamicObjects.length - 3]));
                prev_position -= 3.0;
            }

            setTimeout(() => {
                jetpack_flag = false;
                jump = 1.0;
            }, 15000);
        }
        else if (dynamicObjects[i].type === 'MAGNET')
        {
            displayMessage('GREAT! YOU GOT A MAGNET');
            magnet_flag = true;
            setTimeout(() => {
                magnet_flag = false;
            }, 12000);
        }
        if (dynamicObjects[i].type != 'COIN')
        {
            dynamicObjects[i].translation[0] = -3.0 * getRandomInt(-1, 1);
            dynamicObjects[i].translation[2] = -1.0 * getRandomInt(Math.abs(last_powerup) + 250, Math.abs(last_powerup) + 400);
            last_powerup = dynamicObjects[i].translation[2];
        }
    }
    else if(jump > 1.0) 
    {
        distance = Math.sqrt(Math.pow(collectible[0] - surfer[0], 2) + Math.pow(collectible[2] - surfer[2], 2));
        if(distance < 1.0)
        {
            if (dynamicObjects[i].type === 'COIN')
            {
                coins += 1;
                dynamicObjects[i].translation[0] = -3.0 * getRandomInt(-1, 1);
                dynamicObjects[i].translation[2] = getRandomInt(actual_distance, 5400);
            }
            else if(dynamicObjects[i].type === 'BOOT')
            {
                displayMessage('SWEET! MORE TIME TO JUMP AROUND');
                jump = 2.0;
                keep_jump = true;
                setTimeout(() => {
                    jump = 1.0;
                }, 12000);
            }
            else if (dynamicObjects[i].type === 'JETPACK') 
            {
                displayMessage('JETPACK!!!');
                jetpack_flag = true;
                jump = 0.0;
                var prev_position = staticObjects[0].translation[2] - 30.0;
                for(let i=0; i<102; ++i)
                {
                    dynamicObjects.push(createCoin(getRandomInt(-1, 1) * 3.0, -2.0, prev_position - 3.0, [0.0, 0.0, 45.0 * Math.PI / 180.0], 0.15, gl, true, false));
                    prev_position -= 3.0;
                }

                setTimeout(() => {
                    jetpack_flag = false;
                    jump = 1.0;
                }, 12000);
            }
            else if (dynamicObjects[i].type === 'MAGNET')
            {
                displayMessage('YAYYY! MAGNET!');
                magnet_flag = true;
                setTimeout(() => {
                    magnet_flag = false;
                }, 12000);
            }
            if (dynamicObjects[i].type != 'COIN')
            {
                dynamicObjects[i].translation[0] = -3.0 * getRandomInt(-1, 1);
                dynamicObjects[i].translation[2] = -1.0 * getRandomInt(Math.abs(last_powerup) + 250, Math.abs(last_powerup) + 400);
                last_powerup = dynamicObjects[i].translation[2];
            }
        }
    }   
}

function detectDeadlyCollision(i, gl) {
    let danger = dynamicObjects[i].translation;
    let surfer = staticObjects[0].translation;
    let distance = Math.sqrt(Math.pow(danger[0] - surfer[0], 2) + Math.pow(danger[1] - surfer[1], 2) + Math.pow(danger[2] - surfer[2], 2));
    switch(dynamicObjects[i].type) 
    {
        case 'BARRICADE':
            if(distance <= 1.0 && surfer[0] == danger[0])
            {
                displayMessage('OH NO! YOU CRASHED INTO A BARRICADE');
                speed = 0.0;
                jump = 0.0;
            }
            break;
        case 'TRAIN':
            if(distance <= 15.4 && surfer[0] == danger[0] && surfer[1] < (danger[1] + 1.6))
            {
                displayMessage('OH NO! YOU GOT HIT BY A TRAIN')
                speed = 0.0;
                jump = 0.0;
            }
            break;
    }
}

function checkDeadlyCollision(surfer) {
    for(i in dynamicObjects)
    {
        let danger = dynamicObjects[i].translation;
        let distance = Math.sqrt(Math.pow(danger[0] - surfer[0], 2) + Math.pow(danger[1] - surfer[1], 2) + Math.pow(danger[2] - surfer[2], 2));
        switch (dynamicObjects[i].type) {
            case 'BARRICADE':
            if (distance <= 1.0 && surfer[0] == danger[0]) {
                return true;
            }
            break;
            case 'TRAIN':
            if (distance <= 15.4 && surfer[0] == danger[0] && surfer[1] < (danger[1] + 1.6)) {
                return true;
            }
            break;
        }
    }
    return false;
}

function checkTrainBelowMe(surfer)
{
    base = PLAYER_GROUND;
    for(i in dynamicObjects)
    {
        if(dynamicObjects[i].type == 'TRAIN')
        {
            let distance = Math.sqrt(Math.pow(surfer[0] - dynamicObjects[i].translation[0], 2) + Math.pow(surfer[1] - dynamicObjects[i].translation[1], 2) + Math.pow(surfer[2] - dynamicObjects[i].translation[2], 2));
            if(distance < 15.4 && !jetpack_flag && surfer[0] == dynamicObjects[i].translation[0] && surfer[1] >= (dynamicObjects[i].translation[1] + 1.6))
            {
                base = dynamicObjects[i].translation[1] + 1.9;
            }
        }
    }
}